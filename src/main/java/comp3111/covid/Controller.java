package comp3111.covid;

import java.io.File;
import java.io.IOException;
import java.nio.file.Paths;
import java.time.Duration;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.List;
import java.util.Collection;
import java.util.Optional;

import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.fxml.FXML;
import javafx.geometry.Side;
import javafx.scene.control.Alert;
import javafx.scene.control.Button;
import javafx.scene.control.DatePicker;
import javafx.scene.control.Tab;
import javafx.scene.control.TableColumn;
import javafx.scene.control.TableView;
import javafx.scene.control.TextArea;
import javafx.scene.control.TextField;
import javafx.scene.control.TextInputDialog;
import javafx.stage.FileChooser;
import javafx.stage.FileChooser.ExtensionFilter;
import javafx.scene.control.Alert.AlertType;
import javafx.scene.control.MenuButton;
import javafx.scene.control.CustomMenuItem;
import javafx.scene.control.CheckBox;
import javafx.scene.control.Label;
import java.util.stream.Collectors;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.NumberAxis;
import javafx.scene.chart.CategoryAxis;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;
    
    @FXML
    private TextField tableADataset;
    
    @FXML
    private TextField tableBDataset;

    @FXML
    private TextField tableCDataset;

    @FXML
    private TextField chartADataset;

    @FXML
    private TextField chartBDataset;

    @FXML
    private TextField chartCDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;
    
    @FXML
    private Button tableA_generateButton;
    
    @FXML
    private Button tableB_generateButton;
    
    @FXML
    private Button tableC_generateButton;
    
    @FXML
    private Button chartA_generateButton;
    
    @FXML
    private Button chartB_generateButton;
    
    @FXML
    private Button chartC_generateButton;
    
    @FXML
    private DatePicker tableA_date;
    
    @FXML
    private DatePicker tableB_date;
    
    @FXML
    private DatePicker tableC_date;
    
    @FXML
    private DatePicker chart_A_period_start;
    
    @FXML
    private DatePicker chart_B_period_start;
    
    @FXML
    private DatePicker chart_C_period_start;
    
    @FXML
    private DatePicker chart_A_period_end;
    
    @FXML
    private DatePicker chart_B_period_end;
    
    @FXML
    private DatePicker chart_C_period_end;
    
    @FXML
    private MenuButton tableA_MenuButton;
    
    @FXML
    private MenuButton tableB_MenuButton;
    
    @FXML
    private MenuButton tableC_MenuButton;
    
    @FXML
    private MenuButton chartA_MenuButton;
    
    @FXML
    private MenuButton chartB_MenuButton;
    
    @FXML
    private MenuButton chartC_MenuButton;
    
    @FXML
    private LineChart<String, Number> chartA_LineChart;
    
    @FXML
    private LineChart<String, Number> chartB_LineChart;
    
    @FXML
    private LineChart<String, Number> chartC_LineChart;
    
    @FXML
    private TableView<SingleRecord> tableB_table;
    
    @FXML
    private TableView<SingleRecord> tableA_table;
    
    @FXML
    private TableView<SingleRecord> tableC_table;
    
    @FXML 
    private TableColumn<SingleRecord, String> C_Country;

    @FXML
    private CategoryAxis xAxis;

    @FXML 
    private TableColumn<SingleRecord, String> B_Country;
    
    @FXML 
    private TableColumn<SingleRecord, String> A_Country;
    
    @FXML 
    private TableColumn<SingleRecord, String> C_Fully_Vax;
    
    @FXML 
    private TableColumn<SingleRecord, String> B_Total_Deaths;
    
    @FXML 
    private TableColumn<SingleRecord, String> A_Total_Cases;
    
    @FXML 
    private TableColumn<SingleRecord, String> C_Vax_Rate;
    
    @FXML 
    private TableColumn<SingleRecord, String> B_Total_Deaths_PM;
    
    @FXML 
    private TableColumn<SingleRecord, String> A_Total_Cases_PM;

    @FXML
    private NumberAxis yAxis;
    
    @FXML
    private Button sortCountryA;
    
    boolean sortCountryAReservse = false;
    
    @FXML
    private Button sortCasesA;
    
    boolean sortCasesAReservse = false;
    
    @FXML
    private Button sortCasesPMA;
    
    boolean sortCasesPMAReservse = false;
    
    @FXML
    private Button sortCountryB;
    
    boolean sortCountryBReservse = false;
    
    @FXML
    private Button sortDeathsB;
    
    boolean sortDeathsBReservse = false;
    
    @FXML
    private Button sortDeathsPMB;
    
    boolean sortDeathsPMBReservse = false;
    
    @FXML
    private Button sortCountryC;
    
    boolean sortCountryCReservse = false;
    
    @FXML
    private Button sortVaxC;
    
    boolean sortVaxCReservse = false;
    
    @FXML
    private Button sortVaxRateC;
    
    boolean sortVaxRateCReservse = false;
    
    @FXML
    private Label tableAtitle;
    
    @FXML
    private Label tableBtitle;
    
    @FXML
    private Label tableCtitle;

    
    @FXML
    private Button tableAfileChooser;
    
    @FXML
    private Button tableBfileChooser;
    
    @FXML
    private Button tableCfileChooser;
    
    @FXML
    private Button chartAfileChooser;
    
    @FXML
    private Button chartBfileChooser;
    
    @FXML
    private Button chartCfileChooser;
    
    List<CheckBox> location_boxes;
    String currentFile = "";

    /**
     * initialize the UI component of the application
     */
    @FXML
    public void initialize() {
    	String iDataset = "COVID_Dataset_v1.0.csv";
    	currentFile = "COVID_Dataset_v1.0.csv";
    	Collection<String>locations = DataAnalysis.getAllLocation(iDataset).values();
    	
    	location_boxes = locations.stream().map(objA -> {
    		CheckBox objB = new CheckBox(objA);
    	    return objB;
    	}).collect(Collectors.toList());
    	
    	List<CustomMenuItem> location_items = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
    	
//    	List<CheckBox> location_boxes2 = locations.stream().map(objA -> {
//    		CheckBox objB = new CheckBox(objA);
//    	    return objB;
//    	}).collect(Collectors.toList());
    	
    	List<CustomMenuItem> location_items2 = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
    	
//       	List<CheckBox> location_boxes3 = locations.stream().map(objA -> {
//    		CheckBox objB = new CheckBox(objA);
//    	    return objB;
//    	}).collect(Collectors.toList());
//    	
    	List<CustomMenuItem> location_items3 = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
    	
//       	List<CheckBox> location_boxes4 = locations.stream().map(objA -> {
//    		CheckBox objB = new CheckBox(objA);
//    	    return objB;
//    	}).collect(Collectors.toList());
    	
    	List<CustomMenuItem> location_items4 = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
    	
//       	List<CheckBox> location_boxes5 = locations.stream().map(objA -> {
//    		CheckBox objB = new CheckBox(objA);
//    	    return objB;
//    	}).collect(Collectors.toList());
    	
    	List<CustomMenuItem> location_items5 = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
    	
//       	List<CheckBox> location_boxes6 = locations.stream().map(objA -> {
//    		CheckBox objB = new CheckBox(objA);
//    	    return objB;
//    	}).collect(Collectors.toList());
    	
    	List<CustomMenuItem> location_items6 = location_boxes.stream().map(objA -> {
    	    CustomMenuItem objB = new CustomMenuItem(objA);
    	    objB.setHideOnClick(false);
    	    return objB;
    	}).collect(Collectors.toList());
 
    	
    	tableA_MenuButton.getItems().removeAll(tableA_MenuButton.getItems());
    	tableA_MenuButton.getItems().addAll(location_items);
    	tableB_MenuButton.getItems().removeAll(tableB_MenuButton.getItems());
    	tableB_MenuButton.getItems().addAll(location_items2);
    	tableC_MenuButton.getItems().removeAll(tableC_MenuButton.getItems());
    	tableC_MenuButton.getItems().addAll(location_items3);
    	chartA_MenuButton.getItems().removeAll(chartA_MenuButton.getItems());
    	chartA_MenuButton.getItems().addAll(location_items4);
    	chartB_MenuButton.getItems().removeAll(chartB_MenuButton.getItems());
    	chartB_MenuButton.getItems().addAll(location_items5);
    	chartC_MenuButton.getItems().removeAll(chartC_MenuButton.getItems());
    	chartC_MenuButton.getItems().addAll(location_items6);
    }

    /**
     * this function update the countries in the MenuButton whenever the button is pressed, according to the dataset name input
     */
    @FXML
    void updateCountries() {
    	String dataset = UpdateCountry.getDataSet(tabReport1.isSelected(), tabReport2.isSelected(), tabReport3.isSelected(), 
    												tabApp1.isSelected(), tabApp2.isSelected(), tableADataset.getText(), tableBDataset.getText(), 
    												tableCDataset.getText(), chartADataset.getText(), chartBDataset.getText(), 
    												chartCDataset.getText());
    	if (!UpdateCountry.checkFileExist(System.getProperty("user.dir") + "/src/main/resources/dataset/"+ dataset)) {
    		Alert alert = new Alert(AlertType.ERROR,"Invalid file name. Please put the csv file in the /resources/dataset folder and try again.");
        	alert.showAndWait();
        	return;
    	}
    	
    	if (!dataset.equals(currentFile)) {
    		
	    	currentFile = dataset;
			Collection<String>locations = DataAnalysis.getAllLocation(dataset).values();
	    	
			location_boxes.clear();
	    	location_boxes = locations.stream().map(objA -> {
	    		CheckBox objB = new CheckBox(objA);
	    	    return objB;
	    	}).collect(Collectors.toList());
	    	
	    	List<CustomMenuItem> location_items = location_boxes.stream().map(objA -> {
	    	    CustomMenuItem objB = new CustomMenuItem(objA);
	    	    objB.setHideOnClick(false);
	    	    return objB;
	    	}).collect(Collectors.toList());
	    	
	    	
	    	if (tabReport1.isSelected()) {
	        	tableA_MenuButton.getItems().removeAll(tableA_MenuButton.getItems());
	        	tableA_MenuButton.getItems().addAll(location_items);
	    	}
	    	else if (tabReport2.isSelected()) {
	        	tableB_MenuButton.getItems().removeAll(tableB_MenuButton.getItems());
	        	tableB_MenuButton.getItems().addAll(location_items);
	    	}
	    	else if (tabReport3.isSelected()) {
	        	tableC_MenuButton.getItems().removeAll(tableC_MenuButton.getItems());
	        	tableC_MenuButton.getItems().addAll(location_items);
	    	}
	    	else if (tabApp1.isSelected()) {
	        	chartA_MenuButton.getItems().removeAll(chartA_MenuButton.getItems());
	        	chartA_MenuButton.getItems().addAll(location_items);
	    	}
	    	else if (tabApp2.isSelected()) {
	        	chartB_MenuButton.getItems().removeAll(chartB_MenuButton.getItems());
	        	chartB_MenuButton.getItems().addAll(location_items);
	    	}
	    	else {
	        	chartC_MenuButton.getItems().removeAll(chartC_MenuButton.getItems());
	        	chartC_MenuButton.getItems().addAll(location_items);
	    	}
    	}

    }
    
    /**
     * this method clears the CheckBox of all countries
     */
    
    @FXML
    void clearSelection(){
    	for (CheckBox box:location_boxes) {
    		box.setSelected(false);
    	}
    }
    
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
//    	String iDataset = textfieldDataset.getText();
//    	String iISO = textfieldISO.getText();
//    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
//    	textAreaConsole.setText(oReport);
    }



    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
//    	String iDataset = textfieldDataset.getText();
//    	String iISO = textfieldISO.getText();
//    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
//    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
//    	String iDataset = textfieldDataset.getText();
//    	String iISO = textfieldISO.getText();
//    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
//    	textAreaConsole.setText(oReport);
    }  
    
    /**
     * this method generate a table for Confirmed Cases with a selected list of countries and a date
     * @param event
     */
    @FXML
    void doConfirmedCasesTable(ActionEvent event) {
    	
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);
    	
    	String iDataset = tableADataset.getText();

    	LocalDate date = tableA_date.getValue();
    	String[] dateSplit = date.toString().split("-");
		LocalDate recordDate = LocalDate.of(Integer.parseInt(dateSplit[0]),
											Integer.parseInt(dateSplit[1]), 
											Integer.parseInt(dateSplit[2]));
    	
    	LocalDate[] dateArray = {recordDate, recordDate}; 
    	String[] listOfISO = {};
    	CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(listOfISO), 'A', dateArray);
    	
    	tableAtitle.setText("Number of Confirmed COVID-19 Cases as of " + date);
    	
    	GenTable.generateTable(countryRecord, tableA_table, A_Country, 
    							A_Total_Cases, A_Total_Cases_PM, "caseNumber", 
    							"caseNumberPerM", 'A', recordDate);
    	
    }
    /**
     * this method generate a table for Confirmed Deaths with a selected list of countries and a date
     * @param event
     */
    
    @FXML
    void doConfirmedDeathsTable(ActionEvent event) {
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);
    	String iDataset = tableBDataset.getText();
    	LocalDate date = tableB_date.getValue();
    	String[] dateSplit = date.toString().split("-");
		LocalDate recordDate = LocalDate.of(Integer.parseInt(dateSplit[0]),
											Integer.parseInt(dateSplit[1]), 
											Integer.parseInt(dateSplit[2]));
    	
    	LocalDate[] dateArray = {recordDate, recordDate};
    	String[] listOfISO = {};
    	CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(listOfISO), 'B', dateArray);
    	
    	tableBtitle.setText("Number of Confirmed COVID-19 Deaths as of " + date);
    	
    	GenTable.generateTable(countryRecord, tableB_table, B_Country, 
    			B_Total_Deaths, B_Total_Deaths_PM, "deathNumber", 
    			"deathNumberPerM", 'B', recordDate);
    	
    }
    
    /**
     * this method generate a table for the rate of Vaccination with a selected list of countries and a date
     * @param event
     */
    @FXML
    void doRateOfVaccinationTable(ActionEvent event) {
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);

    	String iDataset = tableCDataset.getText();
    	LocalDate date = tableC_date.getValue();
    	String[] dateSplit = date.toString().split("-");
		LocalDate recordDate = LocalDate.of(Integer.parseInt(dateSplit[0]),
											Integer.parseInt(dateSplit[1]), 
											Integer.parseInt(dateSplit[2]));
    	
    	LocalDate[] dateArray = {recordDate, recordDate}; 
    	String[] listOfISO = {};
    	CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(listOfISO), 'C', dateArray);
    	
    	tableCtitle.setText("Rate of Vaccination against COVID-19 as of " + date);
    	
    	GenTable.generateTable(countryRecord, tableC_table, C_Country, 
    			C_Fully_Vax, C_Vax_Rate, "vaccinatedNumber", 
    			"vaccinationRate", 'C', recordDate);
    	
    }
    
    /**
     * this method generate a chart for Confirmed Cases Per M of a list of selected countries over a period of time
     * @param event
     */
    @FXML
    void doConfirmedCasesChart(ActionEvent event) {
    	chartA_LineChart.getData().clear();
    	chartA_LineChart.setLegendSide(Side.RIGHT);
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);

    	String iDataset = tableADataset.getText();
    	
    	LocalDate start = chart_A_period_start.getValue();
    	LocalDate end = chart_A_period_end.getValue();
    	
    	String[] dateSplitStart = start.toString().split("-");
		LocalDate recordDateStart = LocalDate.of(Integer.parseInt(dateSplitStart[0]),
											Integer.parseInt(dateSplitStart[1]), 
											Integer.parseInt(dateSplitStart[2]));
    	
    	
    	String[] dateSplitEnd = end.toString().split("-");
		LocalDate recordDateEnd = LocalDate.of(Integer.parseInt(dateSplitEnd[0]),
											Integer.parseInt(dateSplitEnd[1]), 
											Integer.parseInt(dateSplitEnd[2]));
    	
		LocalDate[] dateArray = {recordDateStart, recordDateEnd}; 
		
		CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(new String[0]), 'A', dateArray);
        
        //Creating a line chart
		long days = Duration.between(recordDateStart.atStartOfDay(), recordDateEnd.atStartOfDay()).toDays();
		
		chartA_LineChart.setCreateSymbols(false);
		
		GenChart.generateChart(
				chartA_LineChart,
				countryRecord,
				days,
				selectedCountries,
				'A');
    }

    /**
     * this method generate a chart for Confirmed Deaths Per M of a list of selected countries over a period of time
     * @param event
     */
    @FXML
    void doConfirmedDeathsChart(ActionEvent event) {
    	chartB_LineChart.getData().clear();
    	chartB_LineChart.setLegendSide(Side.RIGHT);
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);

    	String iDataset = tableADataset.getText();
    	
    	LocalDate start = chart_B_period_start.getValue();
    	LocalDate end = chart_B_period_end.getValue();
    	
    	String[] dateSplitStart = start.toString().split("-");
		LocalDate recordDateStart = LocalDate.of(Integer.parseInt(dateSplitStart[0]),
											Integer.parseInt(dateSplitStart[1]), 
											Integer.parseInt(dateSplitStart[2]));
    	
    	
    	String[] dateSplitEnd = end.toString().split("-");
		LocalDate recordDateEnd = LocalDate.of(Integer.parseInt(dateSplitEnd[0]),
											Integer.parseInt(dateSplitEnd[1]), 
											Integer.parseInt(dateSplitEnd[2]));
    	
		LocalDate[] dateArray = {recordDateStart, recordDateEnd}; 
		
		CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(new String[0]), 'B', dateArray);
        
        //Creating a line chart
		long days = Duration.between(recordDateStart.atStartOfDay(), recordDateEnd.atStartOfDay()).toDays();
		
		chartB_LineChart.setCreateSymbols(false);
		
		GenChart.generateChart(
				chartB_LineChart,
				countryRecord,
				days,
				selectedCountries,
				'B');
    }

    /**
     * this method generate a chart for Vaccination rate of a list of selected countries over a period of time
     * @param event
     */
    @FXML
    void doRateOfVaccinationChart(ActionEvent event) {
    	chartC_LineChart.getData().clear();
    	chartC_LineChart.setLegendSide(Side.RIGHT);
    	
    	
    	ArrayList<String> selectedCountries = DataAnalysis.getSelectedCountries(location_boxes);

    	String iDataset = tableADataset.getText();
    	
    	LocalDate start = chart_C_period_start.getValue();
    	LocalDate end = chart_C_period_end.getValue();
    	
    	String[] dateSplitStart = start.toString().split("-");
		LocalDate recordDateStart = LocalDate.of(Integer.parseInt(dateSplitStart[0]),
											Integer.parseInt(dateSplitStart[1]), 
											Integer.parseInt(dateSplitStart[2]));
    	
    	
    	String[] dateSplitEnd = end.toString().split("-");
		LocalDate recordDateEnd = LocalDate.of(Integer.parseInt(dateSplitEnd[0]),
											Integer.parseInt(dateSplitEnd[1]), 
											Integer.parseInt(dateSplitEnd[2]));
    	
		LocalDate[] dateArray = {recordDateStart, recordDateEnd}; 
		
		CountryRecord countryRecord = new CountryRecord(iDataset, selectedCountries.toArray(new String[0]), 'C', dateArray);
        
        //Creating a line chart
		long days = Duration.between(recordDateStart.atStartOfDay(), recordDateEnd.atStartOfDay()).toDays() + 1;
		
		chartC_LineChart.setCreateSymbols(false);
		
		GenChart.generateChart(
				chartC_LineChart,
				countryRecord,
				days,
				selectedCountries,
				'C');
		
    
    }
    
    /**
     * this method sort the table in task A1 by country by {@link GenTable#sortDataByCountry(List, boolean)}
     */
    @FXML
    void sortByCountryA() {
    	
    	ObservableList<SingleRecord> records = tableA_table.getItems();
    	GenTable.sortDataByCountry(records, sortCountryAReservse);
    	if (sortCountryAReservse) {
    		sortCountryA.setText("↑");
    	} else {
    		sortCountryA.setText("↓");
    	}
    	sortCountryAReservse = !sortCountryAReservse;
    }
    
    /**
     * this method sort the table in task A1 by cases by {@link GenTable#sortDataByCase(List, boolean, char)}
     */
    @FXML 
    void sortByCases(){
    	
    	ObservableList<SingleRecord> records = tableA_table.getItems();
    	GenTable.sortDataByCase(records, sortCasesAReservse, 'A');
    	if (sortCasesAReservse) {
    		sortCasesA.setText("↑");
    	} else {
    		sortCasesA.setText("↓");
    	}
    	sortCasesAReservse = !sortCasesAReservse;
    	
    }
    
    /**
     * this method sort the table in task A1 by cases per M by {@link GenTable#sortDataByCasePM(List, boolean, char)}
     */
    @FXML
    void sortByCasesPM() {
    	
    	ObservableList<SingleRecord> records = tableA_table.getItems();
    	GenTable.sortDataByCasePM(records, sortCasesPMAReservse, 'A');
    	if (sortCasesPMAReservse) {
    		sortCasesPMA.setText("↑");
    	} else {
    		sortCasesPMA.setText("↓");
    	}
    	sortCasesPMAReservse = !sortCasesPMAReservse;
    	
    }
    
    /**
     * this method sort the table in task B1 by country by {@link GenTable#sortDataByCountry(List, boolean)}
     */
    @FXML
    void sortByCountryB() {
    	
    	ObservableList<SingleRecord> records = tableB_table.getItems();
    	GenTable.sortDataByCountry(records, sortCountryBReservse);
    	if (sortCountryBReservse) {
    		sortCountryB.setText("↑");
    	} else {
    		sortCountryB.setText("↓“");
    	}
    	sortCountryBReservse = !sortCountryBReservse;
    }
    
    /**
     * this method sort the table in task B1 by Deaths by {@link GenTable#sortDataByCase(List, boolean, char)}
     */
    @FXML 
    void sortByDeaths(){
    	
    	ObservableList<SingleRecord> records = tableB_table.getItems();
    	GenTable.sortDataByCase(records, sortDeathsBReservse, 'B');
    	if (sortDeathsBReservse) {
    		sortDeathsB.setText("↑");
    	} else {
    		sortDeathsB.setText("↓");
    	}
    	sortDeathsBReservse = !sortDeathsBReservse;
    	
    }
    
    /**
     * this method sort the table in task B1 by Death Per M by {@link GenTable#sortDataByCasePM(List, boolean, char)}
     */
    @FXML
    void sortByDeathsPM() {
    	
    	ObservableList<SingleRecord> records = tableB_table.getItems();
    	GenTable.sortDataByCasePM(records, sortDeathsPMBReservse, 'B');
    	if (sortDeathsPMBReservse) {
    		sortDeathsPMB.setText("↑");
    	} else {
    		sortDeathsPMB.setText("↓");
    	}
    	sortDeathsPMBReservse = !sortDeathsPMBReservse;
    	
    }
    
    /**
     * this method sort the table in task C1 by country by {@link GenTable#sortDataByCountry(List, boolean)}
     */
    @FXML
    void sortByCountryC() {
    	
    	ObservableList<SingleRecord> records = tableC_table.getItems();
    	GenTable.sortDataByCountry(records, sortCountryCReservse);
    	if (sortCountryCReservse) {
    		sortCountryC.setText("↑");
    	} else {
    		sortCountryC.setText("↓");
    	}
    	sortCountryCReservse = !sortCountryCReservse;
    }
    
    /**
     * this method sort the table in task C1 by Number of fully vaccinated by {@link GenTable#sortDataByCase(List, boolean, char)}
     */
    @FXML 
    void sortByVax(){
    	
    	ObservableList<SingleRecord> records = tableC_table.getItems();
    	GenTable.sortDataByCase(records, sortVaxCReservse, 'C');
    	if (sortVaxCReservse) {
    		sortVaxC.setText("↑");
    	} else {
    		sortVaxC.setText("↓");
    	}
    	sortVaxCReservse = !sortVaxCReservse;
    	
    }
    
    /**
     * this method sort the table in task C1 by Vaccination Rate by {@link GenTable#sortDataByCasePM(List, boolean, char)}
     */
    @FXML
    void sortByVaxRate() {
    	
    	ObservableList<SingleRecord> records = tableC_table.getItems();
    	GenTable.sortDataByCasePM(records, sortVaxRateCReservse, 'C');
    	if (sortVaxRateCReservse) {
    		sortVaxRateC.setText("↑");
    	} else {
    		sortVaxRateC.setText("↓");
    	}
    	sortVaxRateCReservse = !sortVaxRateCReservse;
    	
    }
    

    /**
     * this function generate an input box for the user to enter the saving file path
     */
    @FXML
    void inputBox() {
//    	TextInputDialog textInput = new TextInputDialog();
//    	textInput.setHeaderText(null);
//    	textInput.setGraphic(null);
//    	textInput.setTitle("Set save path");
//    	textInput.getDialogPane().setContentText("Save path (relative path):");
//    	Optional<String> result = textInput.showAndWait();
//    	LineChart<String,Number> lineChart;
//    	if (tabApp1.isSelected()) {
//    		lineChart = chartA_LineChart;
//    	}
//    	else if (tabApp2.isSelected()) {
//    		lineChart = chartB_LineChart;
//    	}
//    	else {
//    		lineChart = chartC_LineChart;
//    	};
//
//    	result.ifPresent(
//    			path->{saveLineChart(lineChart,path);
//    		});
    	
    }
    
    /**
     * this function will be called when the user choose the save path and press Save. It will pop up an alert box if the file path is invalid
     * @param lineChart the javafx LineChart to be saved
     * @param file the file with the name and path to save
     */
    public void saveLineChart(LineChart<String, Number> lineChart, File file) {
    	try{
    		GenChart.saveAsPng(lineChart, file);
    		}
    	catch(IOException e){
        	Alert alert = new Alert(AlertType.ERROR,"Invalid file path. Please try again");
        	alert.showAndWait();
        	inputBox();
    		}

    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task A1
     */
    @FXML
    void tableAchooseFile(ActionEvent event) {
    	tableADataset.setText(FilePicker.filePickingName(tableADataset.getText()));
    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task B1
     */
    @FXML
    void tableBchooseFile(ActionEvent event) {
    	tableBDataset.setText(FilePicker.filePickingName(tableBDataset.getText()));
    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task C1
     */
    @FXML
    void tableCchooseFile(ActionEvent event) {
    	tableCDataset.setText(FilePicker.filePickingName(tableCDataset.getText()));
    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task A2
     */
    @FXML
    void chartAchooseFile(ActionEvent event) {
    	chartADataset.setText(FilePicker.filePickingName(chartADataset.getText()));
    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task B2
     */
    @FXML
    void chartBchooseFile(ActionEvent event) {
    	chartBDataset.setText(FilePicker.filePickingName(chartBDataset.getText()));
    }
    
    /**
     * this method set the dataset file name with the file chosen by {@link FilePicker#filePickingName(String)} in task C2
     */
    @FXML
    void chartCchooseFile(ActionEvent event) {
    	chartCDataset.setText(FilePicker.filePickingName(chartCDataset.getText()));
    }
    
    /**
     * Triggered when users press Save Chart buttons. A dialog box will pop for them to choose the location to save the chart
     */
    @FXML 
    void chooseSavePath(){

    	LineChart<String,Number> lineChart;
    	if (tabApp1.isSelected()) {
    		lineChart = chartA_LineChart;
    	}
    	else if (tabApp2.isSelected()) {
    		lineChart = chartB_LineChart;
    	}
    	else {
    		lineChart = chartC_LineChart;
    	};
    	FileChooser fileChooser = new FileChooser();
   	 
        //Set extension filter for text files
        FileChooser.ExtensionFilter extFilter = new ExtensionFilter("png", "*.png");
        fileChooser.getExtensionFilters().add(extFilter);

        //Show save file dialog
        File file = fileChooser.showSaveDialog(null);

        if (file != null) {
        	saveLineChart(lineChart, file);
        }
    }
}

